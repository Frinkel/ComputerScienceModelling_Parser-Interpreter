// Open the file that defines the type "expr" we shall use as AST
%{
open GCLTypesAST
%}

// Declare the tokens (terminal symbols)
%token <int> NUM
%token <string> VAR
%token <bool> BOOL
%token TIMES DIV PLUS MINUS POW LPAR RPAR EOF
%token AND NOT OR SHORTOR SHORTAND EQUALS NOTEQUALS GREATER LESS GREATEROREQUAL LESSOREQUAL
%token ASSIGN SKIP SEMICOLON IF FI DO OD THEN ELSE
%token LBRAC RBRAC


// NOTE: the actual formats of these tokens are defined in the lexer file
//       as regular expressions

// Specify precedence and associativity of operators
// Precedence is given by the order (from low to high)
%left PLUS MINUS
%left TIMES DIV
%right POW
%left NOT
%left AND SHORTAND
%left OR SHORTOR
%left VAR

// We declare the initial non-terminal symbol
%start start

// We specify the return type of each of then non-terminal symbols
%type <Command> start
%type <AExpr> aExpression
%type <BExpr> bExpression
%type <Command> command
%type <GuardedCommand> guardedCommand

// Grammar productions
%%

// The first production in "formal" notation is
// start -> command
// here written:
start: command EOF             { $1 }

// Note that we need to insert an End-Of-File (EOF)
// The code annotation { $1 } specifies that parsing with this production
// returns whatever parsing the aExpression returns: $1 is the result of parsing
// the first component of the production (i.e. aExpression)

// The productions for expressions are like in the grammar we saw in class
// written in the yacc format:

// a = aExpression
aExpression:
  | VAR                                       { Var($1) }
  | NUM                                       { Num($1) }
  | VAR LBRAC aExpression RBRAC               { Array($1, $3)}
  | aExpression TIMES aExpression             { TimesExpr($1,$3) }
  | aExpression DIV aExpression               { DivExpr($1,$3) }
  | aExpression PLUS aExpression              { PlusExpr($1,$3) }
  | aExpression MINUS aExpression             { MinusExpr($1,$3) }
  | aExpression POW aExpression               { PowExpr($1,$3) }
  | PLUS aExpression                          { UPlusExpr($2) }
  | MINUS aExpression                         { UMinusExpr($2) }
  | LPAR aExpression RPAR                     { $2 }



// b = bExpression
bExpression:
  | BOOL                                      { Bool($1) }
  | bExpression AND bExpression               { AndExpr($1,$3) }
  | NOT bExpression                           { NotExpr($2) }
  | bExpression OR bExpression                { OrExpr($1,$3) }
  | bExpression SHORTOR bExpression           { ShortOrExpr($1,$3) }
  | bExpression SHORTAND bExpression          { ShortAndExpr($1,$3) }
  | aExpression EQUALS aExpression            { EqualsExpr($1,$3) }
  | aExpression NOTEQUALS aExpression         { NotEqualsExpr($1,$3) }
  | aExpression GREATER aExpression           { GreaterExpr($1,$3) }
  | aExpression LESS aExpression              { LessExpr($1,$3) }
  | aExpression GREATEROREQUAL aExpression    { GreaterOrEqualExpr($1,$3) }
  | aExpression LESSOREQUAL aExpression       { LessOrEqualExpr($1,$3) }
  | LPAR bExpression RPAR                     { $2 }


command:
  | aExpression ASSIGN aExpression                            { Assign($1,$3) }
  | SKIP                                                      { Skip }
  | command SEMICOLON command                                 { SemiColon($1, $3) }
  | IF guardedCommand FI                                      { If($2) }
  | DO guardedCommand OD                                      { Do($2) }
  | LPAR command RPAR                                         { $2 }


guardedCommand:
  | bExpression THEN command                                  { ExecuteIf($1, $3) }
  | guardedCommand ELSE guardedCommand                        { Else($1, $3) }
  | LPAR guardedCommand RPAR                     { $2 }
%%





