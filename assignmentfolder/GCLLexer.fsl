// The generated lexer module will start with this code
{
module GCLLexer
open FSharp.Text.Lexing
open System
// open the module that defines the tokens
open GCLParser
}

// We define macros for some regular expressions we will use later
let digit       = ['0'-'9']
let num         = digit+ ( '.' digit+)?  ('E' ('+'|'-')? digit+ )?
let char        = ['a'-'z' 'A'-'Z']
let char2        = ['a'-'z' 'A'-'Z' '0'-'9']
let var         = char+ (char2+)?
let whitespace  = [' ' '\t']
let newline     = "\n\r" | '\n' | '\r'
let boolean     = "true" | "false"


// We define now the rules for recognising and building tokens
// for each of the tokens of our language we need a rule
// NOTE: rules are applied in order top-down.
//       This is important when tokens overlap (not in this example)
rule tokenize = parse
// deal with tokens that need to be ignored (skip them)
| whitespace    { tokenize lexbuf }
| newline       { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf; }
// deal with tokens that need to be built
| boolean       { BOOL(Boolean.Parse(LexBuffer<_>.LexemeString lexbuf)) }
| ":="          { ASSIGN }
| "skip"        { SKIP }
| ';'           { SEMICOLON }
| "if"          { IF }
| "fi"          { FI }
| "do"          { DO }
| "od"          { OD }
| "->"          { THEN }
| "[]"          { ELSE }
| '*'           { TIMES }
| '/'           { DIV }
| '+'           { PLUS }
| '-'           { MINUS }
| '^'           { POW }
| '('           { LPAR }
| ')'           { RPAR }
| '['           { LBRAC }
| ']'           { RBRAC }
| '&'           { AND }
| '!'           { NOT }
| '|'           { OR }
| "||"          { SHORTOR }
| "&&"          { SHORTAND }
| '='           { EQUALS }
| "!="          { NOTEQUALS }
| '>'           { GREATER }
| '<'           { LESS }
| ">="          { GREATEROREQUAL }
| "<="          { LESSOREQUAL }
| eof           { EOF }
| var           { VAR(LexBuffer<_>.LexemeString lexbuf) }
| num           { NUM(Int32.Parse(LexBuffer<_>.LexemeString lexbuf)) }


