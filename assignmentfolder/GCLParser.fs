// Implementation file for parser generated by fsyacc
module GCLParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "GCLParser.fsp"

open GCLTypesAST

# 10 "GCLParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | LBRAC
  | RBRAC
  | ASSIGN
  | SKIP
  | SEMICOLON
  | IF
  | FI
  | DO
  | OD
  | THEN
  | ELSE
  | AND
  | NOT
  | OR
  | SHORTOR
  | SHORTAND
  | EQUALS
  | NOTEQUALS
  | GREATER
  | LESS
  | GREATEROREQUAL
  | LESSOREQUAL
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | LPAR
  | RPAR
  | EOF
  | BOOL of (bool)
  | VAR of (string)
  | NUM of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_LBRAC
    | TOKEN_RBRAC
    | TOKEN_ASSIGN
    | TOKEN_SKIP
    | TOKEN_SEMICOLON
    | TOKEN_IF
    | TOKEN_FI
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_AND
    | TOKEN_NOT
    | TOKEN_OR
    | TOKEN_SHORTOR
    | TOKEN_SHORTAND
    | TOKEN_EQUALS
    | TOKEN_NOTEQUALS
    | TOKEN_GREATER
    | TOKEN_LESS
    | TOKEN_GREATEROREQUAL
    | TOKEN_LESSOREQUAL
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_EOF
    | TOKEN_BOOL
    | TOKEN_VAR
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_aExpression
    | NONTERM_bExpression
    | NONTERM_command
    | NONTERM_guardedCommand

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | LBRAC  -> 0 
  | RBRAC  -> 1 
  | ASSIGN  -> 2 
  | SKIP  -> 3 
  | SEMICOLON  -> 4 
  | IF  -> 5 
  | FI  -> 6 
  | DO  -> 7 
  | OD  -> 8 
  | THEN  -> 9 
  | ELSE  -> 10 
  | AND  -> 11 
  | NOT  -> 12 
  | OR  -> 13 
  | SHORTOR  -> 14 
  | SHORTAND  -> 15 
  | EQUALS  -> 16 
  | NOTEQUALS  -> 17 
  | GREATER  -> 18 
  | LESS  -> 19 
  | GREATEROREQUAL  -> 20 
  | LESSOREQUAL  -> 21 
  | TIMES  -> 22 
  | DIV  -> 23 
  | PLUS  -> 24 
  | MINUS  -> 25 
  | POW  -> 26 
  | LPAR  -> 27 
  | RPAR  -> 28 
  | EOF  -> 29 
  | BOOL _ -> 30 
  | VAR _ -> 31 
  | NUM _ -> 32 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_LBRAC 
  | 1 -> TOKEN_RBRAC 
  | 2 -> TOKEN_ASSIGN 
  | 3 -> TOKEN_SKIP 
  | 4 -> TOKEN_SEMICOLON 
  | 5 -> TOKEN_IF 
  | 6 -> TOKEN_FI 
  | 7 -> TOKEN_DO 
  | 8 -> TOKEN_OD 
  | 9 -> TOKEN_THEN 
  | 10 -> TOKEN_ELSE 
  | 11 -> TOKEN_AND 
  | 12 -> TOKEN_NOT 
  | 13 -> TOKEN_OR 
  | 14 -> TOKEN_SHORTOR 
  | 15 -> TOKEN_SHORTAND 
  | 16 -> TOKEN_EQUALS 
  | 17 -> TOKEN_NOTEQUALS 
  | 18 -> TOKEN_GREATER 
  | 19 -> TOKEN_LESS 
  | 20 -> TOKEN_GREATEROREQUAL 
  | 21 -> TOKEN_LESSOREQUAL 
  | 22 -> TOKEN_TIMES 
  | 23 -> TOKEN_DIV 
  | 24 -> TOKEN_PLUS 
  | 25 -> TOKEN_MINUS 
  | 26 -> TOKEN_POW 
  | 27 -> TOKEN_LPAR 
  | 28 -> TOKEN_RPAR 
  | 29 -> TOKEN_EOF 
  | 30 -> TOKEN_BOOL 
  | 31 -> TOKEN_VAR 
  | 32 -> TOKEN_NUM 
  | 35 -> TOKEN_end_of_input
  | 33 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_aExpression 
    | 3 -> NONTERM_aExpression 
    | 4 -> NONTERM_aExpression 
    | 5 -> NONTERM_aExpression 
    | 6 -> NONTERM_aExpression 
    | 7 -> NONTERM_aExpression 
    | 8 -> NONTERM_aExpression 
    | 9 -> NONTERM_aExpression 
    | 10 -> NONTERM_aExpression 
    | 11 -> NONTERM_aExpression 
    | 12 -> NONTERM_aExpression 
    | 13 -> NONTERM_bExpression 
    | 14 -> NONTERM_bExpression 
    | 15 -> NONTERM_bExpression 
    | 16 -> NONTERM_bExpression 
    | 17 -> NONTERM_bExpression 
    | 18 -> NONTERM_bExpression 
    | 19 -> NONTERM_bExpression 
    | 20 -> NONTERM_bExpression 
    | 21 -> NONTERM_bExpression 
    | 22 -> NONTERM_bExpression 
    | 23 -> NONTERM_bExpression 
    | 24 -> NONTERM_bExpression 
    | 25 -> NONTERM_bExpression 
    | 26 -> NONTERM_command 
    | 27 -> NONTERM_command 
    | 28 -> NONTERM_command 
    | 29 -> NONTERM_command 
    | 30 -> NONTERM_command 
    | 31 -> NONTERM_command 
    | 32 -> NONTERM_guardedCommand 
    | 33 -> NONTERM_guardedCommand 
    | 34 -> NONTERM_guardedCommand 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 35 
let _fsyacc_tagOfErrorTerminal = 33

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | LBRAC  -> "LBRAC" 
  | RBRAC  -> "RBRAC" 
  | ASSIGN  -> "ASSIGN" 
  | SKIP  -> "SKIP" 
  | SEMICOLON  -> "SEMICOLON" 
  | IF  -> "IF" 
  | FI  -> "FI" 
  | DO  -> "DO" 
  | OD  -> "OD" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | AND  -> "AND" 
  | NOT  -> "NOT" 
  | OR  -> "OR" 
  | SHORTOR  -> "SHORTOR" 
  | SHORTAND  -> "SHORTAND" 
  | EQUALS  -> "EQUALS" 
  | NOTEQUALS  -> "NOTEQUALS" 
  | GREATER  -> "GREATER" 
  | LESS  -> "LESS" 
  | GREATEROREQUAL  -> "GREATEROREQUAL" 
  | LESSOREQUAL  -> "LESSOREQUAL" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | POW  -> "POW" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | EOF  -> "EOF" 
  | BOOL _ -> "BOOL" 
  | VAR _ -> "VAR" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | LBRAC  -> (null : System.Object) 
  | RBRAC  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | SKIP  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | FI  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | OD  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | SHORTOR  -> (null : System.Object) 
  | SHORTAND  -> (null : System.Object) 
  | EQUALS  -> (null : System.Object) 
  | NOTEQUALS  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | GREATEROREQUAL  -> (null : System.Object) 
  | LESSOREQUAL  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 30us; 65535us; 0us; 26us; 6us; 7us; 28us; 9us; 29us; 10us; 30us; 11us; 31us; 12us; 32us; 13us; 33us; 14us; 34us; 15us; 35us; 16us; 36us; 17us; 37us; 17us; 38us; 18us; 49us; 19us; 50us; 19us; 51us; 19us; 52us; 19us; 53us; 19us; 54us; 20us; 55us; 21us; 56us; 22us; 57us; 23us; 58us; 24us; 59us; 25us; 61us; 27us; 66us; 26us; 67us; 19us; 70us; 19us; 74us; 26us; 77us; 19us; 10us; 65535us; 36us; 46us; 37us; 47us; 49us; 41us; 50us; 42us; 51us; 43us; 52us; 44us; 53us; 45us; 67us; 48us; 70us; 48us; 77us; 48us; 4us; 65535us; 0us; 2us; 38us; 64us; 66us; 63us; 74us; 65us; 4us; 65535us; 37us; 76us; 67us; 68us; 70us; 71us; 77us; 75us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 34us; 45us; 50us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 28us; 1us; 1us; 2us; 2us; 4us; 1us; 3us; 1us; 4us; 6us; 4us; 5us; 6us; 7us; 8us; 9us; 1us; 4us; 6us; 5us; 5us; 6us; 7us; 8us; 9us; 6us; 5us; 6us; 6us; 7us; 8us; 9us; 6us; 5us; 6us; 7us; 7us; 8us; 9us; 6us; 5us; 6us; 7us; 8us; 8us; 9us; 6us; 5us; 6us; 7us; 8us; 9us; 9us; 6us; 5us; 6us; 7us; 8us; 9us; 10us; 6us; 5us; 6us; 7us; 8us; 9us; 11us; 6us; 5us; 6us; 7us; 8us; 9us; 12us; 12us; 5us; 6us; 7us; 8us; 9us; 12us; 19us; 20us; 21us; 22us; 23us; 24us; 7us; 5us; 6us; 7us; 8us; 9us; 12us; 26us; 11us; 5us; 6us; 7us; 8us; 9us; 19us; 20us; 21us; 22us; 23us; 24us; 6us; 5us; 6us; 7us; 8us; 9us; 19us; 6us; 5us; 6us; 7us; 8us; 9us; 20us; 6us; 5us; 6us; 7us; 8us; 9us; 21us; 6us; 5us; 6us; 7us; 8us; 9us; 22us; 6us; 5us; 6us; 7us; 8us; 9us; 23us; 6us; 5us; 6us; 7us; 8us; 9us; 24us; 6us; 5us; 6us; 7us; 8us; 9us; 26us; 6us; 5us; 6us; 7us; 8us; 9us; 26us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 2us; 12us; 25us; 3us; 12us; 25us; 34us; 2us; 12us; 31us; 1us; 12us; 1us; 13us; 5us; 14us; 14us; 16us; 17us; 18us; 5us; 14us; 15us; 16us; 17us; 18us; 5us; 14us; 16us; 16us; 17us; 18us; 5us; 14us; 16us; 17us; 17us; 18us; 5us; 14us; 16us; 17us; 18us; 18us; 5us; 14us; 16us; 17us; 18us; 25us; 6us; 14us; 16us; 17us; 18us; 25us; 32us; 5us; 14us; 16us; 17us; 18us; 32us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 2us; 28us; 28us; 2us; 28us; 31us; 2us; 28us; 32us; 1us; 28us; 1us; 29us; 2us; 29us; 33us; 1us; 29us; 1us; 30us; 2us; 30us; 33us; 1us; 30us; 1us; 31us; 1us; 32us; 2us; 33us; 33us; 2us; 33us; 34us; 1us; 33us; 1us; 34us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 12us; 14us; 16us; 23us; 25us; 32us; 39us; 46us; 53us; 60us; 67us; 74us; 81us; 94us; 102us; 114us; 121us; 128us; 135us; 142us; 149us; 156us; 163us; 170us; 172us; 174us; 176us; 178us; 180us; 182us; 184us; 186us; 189us; 193us; 196us; 198us; 200us; 206us; 212us; 218us; 224us; 230us; 236us; 243us; 249us; 251us; 253us; 255us; 257us; 259us; 261us; 263us; 265us; 267us; 269us; 271us; 273us; 275us; 277us; 280us; 283us; 286us; 288us; 290us; 293us; 295us; 297us; 300us; 302us; 304us; 306us; 309us; 312us; 314us; |]
let _fsyacc_action_rows = 79
let _fsyacc_actionTableElements = [|8us; 32768us; 3us; 62us; 5us; 67us; 7us; 70us; 24us; 33us; 25us; 34us; 27us; 38us; 31us; 4us; 32us; 5us; 0us; 49152us; 2us; 32768us; 4us; 66us; 29us; 3us; 0us; 16385us; 1us; 16386us; 0us; 6us; 0us; 16387us; 5us; 32768us; 24us; 33us; 25us; 34us; 27us; 35us; 31us; 4us; 32us; 5us; 6us; 32768us; 1us; 8us; 22us; 28us; 23us; 29us; 24us; 30us; 25us; 31us; 26us; 32us; 0us; 16388us; 1us; 16389us; 26us; 32us; 1us; 16390us; 26us; 32us; 3us; 16391us; 22us; 28us; 23us; 29us; 26us; 32us; 3us; 16392us; 22us; 28us; 23us; 29us; 26us; 32us; 1us; 16393us; 26us; 32us; 3us; 16394us; 22us; 28us; 23us; 29us; 26us; 32us; 3us; 16395us; 22us; 28us; 23us; 29us; 26us; 32us; 6us; 32768us; 22us; 28us; 23us; 29us; 24us; 30us; 25us; 31us; 26us; 32us; 28us; 39us; 12us; 32768us; 16us; 54us; 17us; 55us; 18us; 56us; 19us; 57us; 20us; 58us; 21us; 59us; 22us; 28us; 23us; 29us; 24us; 30us; 25us; 31us; 26us; 32us; 28us; 39us; 7us; 32768us; 2us; 61us; 22us; 28us; 23us; 29us; 24us; 30us; 25us; 31us; 26us; 32us; 28us; 39us; 11us; 32768us; 16us; 54us; 17us; 55us; 18us; 56us; 19us; 57us; 20us; 58us; 21us; 59us; 22us; 28us; 23us; 29us; 24us; 30us; 25us; 31us; 26us; 32us; 5us; 16403us; 22us; 28us; 23us; 29us; 24us; 30us; 25us; 31us; 26us; 32us; 5us; 16404us; 22us; 28us; 23us; 29us; 24us; 30us; 25us; 31us; 26us; 32us; 5us; 16405us; 22us; 28us; 23us; 29us; 24us; 30us; 25us; 31us; 26us; 32us; 5us; 16406us; 22us; 28us; 23us; 29us; 24us; 30us; 25us; 31us; 26us; 32us; 5us; 16407us; 22us; 28us; 23us; 29us; 24us; 30us; 25us; 31us; 26us; 32us; 5us; 16408us; 22us; 28us; 23us; 29us; 24us; 30us; 25us; 31us; 26us; 32us; 6us; 32768us; 2us; 61us; 22us; 28us; 23us; 29us; 24us; 30us; 25us; 31us; 26us; 32us; 5us; 16410us; 22us; 28us; 23us; 29us; 24us; 30us; 25us; 31us; 26us; 32us; 5us; 32768us; 24us; 33us; 25us; 34us; 27us; 35us; 31us; 4us; 32us; 5us; 5us; 32768us; 24us; 33us; 25us; 34us; 27us; 35us; 31us; 4us; 32us; 5us; 5us; 32768us; 24us; 33us; 25us; 34us; 27us; 35us; 31us; 4us; 32us; 5us; 5us; 32768us; 24us; 33us; 25us; 34us; 27us; 35us; 31us; 4us; 32us; 5us; 5us; 32768us; 24us; 33us; 25us; 34us; 27us; 35us; 31us; 4us; 32us; 5us; 5us; 32768us; 24us; 33us; 25us; 34us; 27us; 35us; 31us; 4us; 32us; 5us; 5us; 32768us; 24us; 33us; 25us; 34us; 27us; 35us; 31us; 4us; 32us; 5us; 5us; 32768us; 24us; 33us; 25us; 34us; 27us; 35us; 31us; 4us; 32us; 5us; 7us; 32768us; 12us; 50us; 24us; 33us; 25us; 34us; 27us; 36us; 30us; 40us; 31us; 4us; 32us; 5us; 7us; 32768us; 12us; 50us; 24us; 33us; 25us; 34us; 27us; 37us; 30us; 40us; 31us; 4us; 32us; 5us; 8us; 32768us; 3us; 62us; 5us; 67us; 7us; 70us; 24us; 33us; 25us; 34us; 27us; 38us; 31us; 4us; 32us; 5us; 0us; 16396us; 0us; 16397us; 2us; 16398us; 13us; 51us; 14us; 52us; 4us; 16399us; 11us; 49us; 13us; 51us; 14us; 52us; 15us; 53us; 0us; 16400us; 0us; 16401us; 2us; 16402us; 13us; 51us; 14us; 52us; 5us; 32768us; 11us; 49us; 13us; 51us; 14us; 52us; 15us; 53us; 28us; 60us; 6us; 32768us; 9us; 74us; 11us; 49us; 13us; 51us; 14us; 52us; 15us; 53us; 28us; 60us; 5us; 32768us; 9us; 74us; 11us; 49us; 13us; 51us; 14us; 52us; 15us; 53us; 7us; 32768us; 12us; 50us; 24us; 33us; 25us; 34us; 27us; 36us; 30us; 40us; 31us; 4us; 32us; 5us; 7us; 32768us; 12us; 50us; 24us; 33us; 25us; 34us; 27us; 36us; 30us; 40us; 31us; 4us; 32us; 5us; 7us; 32768us; 12us; 50us; 24us; 33us; 25us; 34us; 27us; 36us; 30us; 40us; 31us; 4us; 32us; 5us; 7us; 32768us; 12us; 50us; 24us; 33us; 25us; 34us; 27us; 36us; 30us; 40us; 31us; 4us; 32us; 5us; 7us; 32768us; 12us; 50us; 24us; 33us; 25us; 34us; 27us; 36us; 30us; 40us; 31us; 4us; 32us; 5us; 5us; 32768us; 24us; 33us; 25us; 34us; 27us; 35us; 31us; 4us; 32us; 5us; 5us; 32768us; 24us; 33us; 25us; 34us; 27us; 35us; 31us; 4us; 32us; 5us; 5us; 32768us; 24us; 33us; 25us; 34us; 27us; 35us; 31us; 4us; 32us; 5us; 5us; 32768us; 24us; 33us; 25us; 34us; 27us; 35us; 31us; 4us; 32us; 5us; 5us; 32768us; 24us; 33us; 25us; 34us; 27us; 35us; 31us; 4us; 32us; 5us; 5us; 32768us; 24us; 33us; 25us; 34us; 27us; 35us; 31us; 4us; 32us; 5us; 0us; 16409us; 5us; 32768us; 24us; 33us; 25us; 34us; 27us; 35us; 31us; 4us; 32us; 5us; 0us; 16411us; 1us; 16412us; 4us; 66us; 2us; 32768us; 4us; 66us; 28us; 73us; 1us; 16416us; 4us; 66us; 8us; 32768us; 3us; 62us; 5us; 67us; 7us; 70us; 24us; 33us; 25us; 34us; 27us; 38us; 31us; 4us; 32us; 5us; 7us; 32768us; 12us; 50us; 24us; 33us; 25us; 34us; 27us; 37us; 30us; 40us; 31us; 4us; 32us; 5us; 2us; 32768us; 6us; 69us; 10us; 77us; 0us; 16413us; 7us; 32768us; 12us; 50us; 24us; 33us; 25us; 34us; 27us; 37us; 30us; 40us; 31us; 4us; 32us; 5us; 2us; 32768us; 8us; 72us; 10us; 77us; 0us; 16414us; 0us; 16415us; 8us; 32768us; 3us; 62us; 5us; 67us; 7us; 70us; 24us; 33us; 25us; 34us; 27us; 38us; 31us; 4us; 32us; 5us; 1us; 16417us; 10us; 77us; 2us; 32768us; 10us; 77us; 28us; 78us; 7us; 32768us; 12us; 50us; 24us; 33us; 25us; 34us; 27us; 37us; 30us; 40us; 31us; 4us; 32us; 5us; 0us; 16418us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 9us; 10us; 13us; 14us; 16us; 17us; 23us; 30us; 31us; 33us; 35us; 39us; 43us; 45us; 49us; 53us; 60us; 73us; 81us; 93us; 99us; 105us; 111us; 117us; 123us; 129us; 136us; 142us; 148us; 154us; 160us; 166us; 172us; 178us; 184us; 190us; 198us; 206us; 215us; 216us; 217us; 220us; 225us; 226us; 227us; 230us; 236us; 243us; 249us; 257us; 265us; 273us; 281us; 289us; 295us; 301us; 307us; 313us; 319us; 325us; 326us; 332us; 333us; 335us; 338us; 340us; 349us; 357us; 360us; 361us; 369us; 372us; 373us; 374us; 383us; 385us; 388us; 396us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 4us; 3us; 3us; 3us; 3us; 3us; 2us; 2us; 3us; 1us; 3us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; 5us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16387us; 65535us; 65535us; 16388us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 16397us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16409us; 65535us; 16411us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16413us; 65535us; 65535us; 16414us; 16415us; 65535us; 65535us; 65535us; 65535us; 16418us; |]
let _fsyacc_reductions ()  =    [| 
# 296 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 305 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "GCLParser.fsp"
                                                      _1 
                   )
# 45 "GCLParser.fsp"
                 : Command));
# 316 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "GCLParser.fsp"
                                                                     Var(_1) 
                   )
# 57 "GCLParser.fsp"
                 : AExpr));
# 327 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "GCLParser.fsp"
                                                                     Num(_1) 
                   )
# 58 "GCLParser.fsp"
                 : AExpr));
# 338 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : AExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "GCLParser.fsp"
                                                                     Array(_1, _3)
                   )
# 59 "GCLParser.fsp"
                 : AExpr));
# 350 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : AExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : AExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "GCLParser.fsp"
                                                                     TimesExpr(_1,_3) 
                   )
# 60 "GCLParser.fsp"
                 : AExpr));
# 362 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : AExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : AExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "GCLParser.fsp"
                                                                     DivExpr(_1,_3) 
                   )
# 61 "GCLParser.fsp"
                 : AExpr));
# 374 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : AExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : AExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "GCLParser.fsp"
                                                                     PlusExpr(_1,_3) 
                   )
# 62 "GCLParser.fsp"
                 : AExpr));
# 386 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : AExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : AExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "GCLParser.fsp"
                                                                     MinusExpr(_1,_3) 
                   )
# 63 "GCLParser.fsp"
                 : AExpr));
# 398 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : AExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : AExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "GCLParser.fsp"
                                                                     PowExpr(_1,_3) 
                   )
# 64 "GCLParser.fsp"
                 : AExpr));
# 410 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : AExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "GCLParser.fsp"
                                                                     UPlusExpr(_2) 
                   )
# 65 "GCLParser.fsp"
                 : AExpr));
# 421 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : AExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "GCLParser.fsp"
                                                                     UMinusExpr(_2) 
                   )
# 66 "GCLParser.fsp"
                 : AExpr));
# 432 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : AExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "GCLParser.fsp"
                                                                     _2 
                   )
# 67 "GCLParser.fsp"
                 : AExpr));
# 443 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "GCLParser.fsp"
                                                                     Bool(_1) 
                   )
# 73 "GCLParser.fsp"
                 : BExpr));
# 454 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : BExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "GCLParser.fsp"
                                                                     AndExpr(_1,_3) 
                   )
# 74 "GCLParser.fsp"
                 : BExpr));
# 466 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "GCLParser.fsp"
                                                                     NotExpr(_2) 
                   )
# 75 "GCLParser.fsp"
                 : BExpr));
# 477 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : BExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "GCLParser.fsp"
                                                                     OrExpr(_1,_3) 
                   )
# 76 "GCLParser.fsp"
                 : BExpr));
# 489 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : BExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "GCLParser.fsp"
                                                                     ShortOrExpr(_1,_3) 
                   )
# 77 "GCLParser.fsp"
                 : BExpr));
# 501 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : BExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "GCLParser.fsp"
                                                                     ShortAndExpr(_1,_3) 
                   )
# 78 "GCLParser.fsp"
                 : BExpr));
# 513 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : AExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : AExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "GCLParser.fsp"
                                                                     EqualsExpr(_1,_3) 
                   )
# 79 "GCLParser.fsp"
                 : BExpr));
# 525 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : AExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : AExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "GCLParser.fsp"
                                                                     NotEqualsExpr(_1,_3) 
                   )
# 80 "GCLParser.fsp"
                 : BExpr));
# 537 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : AExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : AExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "GCLParser.fsp"
                                                                     GreaterExpr(_1,_3) 
                   )
# 81 "GCLParser.fsp"
                 : BExpr));
# 549 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : AExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : AExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "GCLParser.fsp"
                                                                     LessExpr(_1,_3) 
                   )
# 82 "GCLParser.fsp"
                 : BExpr));
# 561 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : AExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : AExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "GCLParser.fsp"
                                                                     GreaterOrEqualExpr(_1,_3) 
                   )
# 83 "GCLParser.fsp"
                 : BExpr));
# 573 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : AExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : AExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "GCLParser.fsp"
                                                                     LessOrEqualExpr(_1,_3) 
                   )
# 84 "GCLParser.fsp"
                 : BExpr));
# 585 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : BExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "GCLParser.fsp"
                                                                     _2 
                   )
# 85 "GCLParser.fsp"
                 : BExpr));
# 596 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : AExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : AExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "GCLParser.fsp"
                                                                                     Assign(_1,_3) 
                   )
# 89 "GCLParser.fsp"
                 : Command));
# 608 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "GCLParser.fsp"
                                                                                     Skip 
                   )
# 90 "GCLParser.fsp"
                 : Command));
# 618 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Command)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "GCLParser.fsp"
                                                                                     SemiColon(_1, _3) 
                   )
# 91 "GCLParser.fsp"
                 : Command));
# 630 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : GuardedCommand)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "GCLParser.fsp"
                                                                                     If(_2) 
                   )
# 92 "GCLParser.fsp"
                 : Command));
# 641 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : GuardedCommand)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "GCLParser.fsp"
                                                                                     Do(_2) 
                   )
# 93 "GCLParser.fsp"
                 : Command));
# 652 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "GCLParser.fsp"
                                                                                     _2 
                   )
# 94 "GCLParser.fsp"
                 : Command));
# 663 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : BExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "GCLParser.fsp"
                                                                                     ExecuteIf(_1, _3) 
                   )
# 98 "GCLParser.fsp"
                 : GuardedCommand));
# 675 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : GuardedCommand)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : GuardedCommand)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "GCLParser.fsp"
                                                                                     Else(_1, _3) 
                   )
# 99 "GCLParser.fsp"
                 : GuardedCommand));
# 687 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : GuardedCommand)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "GCLParser.fsp"
                                                                        _2 
                   )
# 100 "GCLParser.fsp"
                 : GuardedCommand));
|]
# 699 "GCLParser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 36;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Command =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
